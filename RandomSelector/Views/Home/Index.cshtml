@using RandomSelector.Common
@using RandomSelector.Models.ViewModel
@model IndexViewModel

@section main {
@Html.ValidationSummary(false)
@if (Model.IsPostRequest)
{
	<table class="table table-condensed" style="margin-bottom:10px;">
		<tr>
			<th colspan="4">王国カード</th>
		</tr>

		@foreach (var card in Model.UseKingdomCardList.OrderBy(x => x.ExpansionID).ThenBy(x => x.SortOrder).ThenBy(x => x.NameKana))
		{
			<tr class="expansion@(card.ExpansionID.ToString("D"))">
				<td class="col-xs-3">@Const.ExpansionData[card.ExpansionID]</td>
				<td class="col-xs-1">@card.DisplayCost</td>
				<td class="col-xs-7">@card.Name</td>
				<td class="col-xs-1">@card.Remark</td>
			</tr>
		}

		@if (Model.UseNotKingdomCardList.Any())
		{
			<tr>
				<th colspan="4">イベント・ランドマーク</th>
			</tr>
			foreach (var card in Model.UseNotKingdomCardList.OrderBy(x => x.ExpansionID).ThenBy(x => x.SortOrder).ThenBy(x => x.NameKana))
			{
				<tr class="expansion@(card.ExpansionID.ToString("D"))">
					<td>@Const.ExpansionData[card.ExpansionID]</td>
					<td>@card.DisplayCost</td>
					<td>@card.Name</td>
					<td>@(card.Type == CardType.Event ? Const.RemarkEvent : Const.RemarkLandMark)</td>
				</tr>
				if (card.CardID == Const.ObeliskCardID)
				{
					<tr>
						<td colspan="4" style="color:gray; font-size:10pt;">（※対象サプライ：@Model.GetObeliskTargetSuuplyCardName()）</td>
					</tr>
				}
			}
		}

		@if (Model.DarkMarketCardList != null && Model.DarkMarketCardList.Any())
		{
			<tr>
				<th colspan="4">闇市場デッキ</th>
			</tr>
			foreach (var card in Model.DarkMarketCardList.OrderBy(x => x.ExpansionID).ThenBy(x => x.SortOrder).ThenBy(x => x.NameKana))
			{
				<tr class="expansion@(card.ExpansionID.ToString("D"))">
					<td>@Const.ExpansionData[card.ExpansionID]</td>
					<td>@card.DisplayCost</td>
					<td colspan="2">@card.Name</td>
				</tr>
			}
		}
	</table>
	<div id="itemArea">
		<button class="btn btn-xs @(Model.IsUseColony ? "btn-success" : "btn-default")" disabled="@(!Model.IsUseColony)">白金貨・植民地</button>
		<button class="btn btn-xs @(Model.IsUseShelter ? "btn-success" : "btn-default")" disabled="@(!Model.IsUseShelter)">避難所</button>
		@foreach (ItemCode item in Enum.GetValues(typeof(ItemCode)))
		{
			var isUse = Model.IsUseItem(item);
			<button class="btn btn-xs @(isUse ? "btn-success" : "btn-default")" disabled="@(!isUse)">@Const.ItemName[item]</button>
		}
	</div>
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	<hr />
	<input type="submit" class="btn btn-primary btn-block btn-lg center-block" value="実行" />
	<div class="form-group" id="expantionArea">
		@foreach (var expansion in Const.ExpansionData)
		{
			<div class="checkbox">
				<label>
					<input type="checkbox" id="@(nameof(IndexParam.ExpansionIDList) + "_" + expansion.Key.ToString("D"))" name="@nameof(IndexParam.ExpansionIDList)" value="@expansion.Key" checked="@Model.Param.ExpansionIDList.Contains(expansion.Key)" />
					@expansion.Value
				</label>
			</div>
		}
		<div id="promCard" class="col-xs-offset-1" style="@(Model.Param.ExpansionIDList.Any(x => x == ExpansionID.Promotion) ? "" : "display:none;")">
			@foreach (var prom in Model.PromCardList)
			{
				<div class="checkbox">
					<label>
						<input type="checkbox" name="@nameof(IndexParam.SelectedPromCardID)" value="@prom.CardID" checked="@Model.Param.SelectedPromCardID.Contains(prom.CardID)" />
						@prom.Name
					</label>
				</div>
			}
		</div>
	</div>
}
}

@section footerJS {
	<script src="~/Scripts/RaddomSelector.js"></script>
}
